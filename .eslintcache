[{"/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/index.js":"1","/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/Components/Software.js":"2","/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/Components/App.js":"3","/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/Components/Account.js":"4","/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/reportWebVitals.js":"5","/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/contexts/AuthContext.js":"6","/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/Components/firebase.js":"7"},{"size":1652,"mtime":1612189814015,"results":"8","hashOfConfig":"9"},{"size":709,"mtime":1611980241679,"results":"10","hashOfConfig":"9"},{"size":674,"mtime":1612128999146,"results":"11","hashOfConfig":"9"},{"size":7990,"mtime":1612189848640,"results":"12","hashOfConfig":"9"},{"size":362,"mtime":1611968675210,"results":"13","hashOfConfig":"9"},{"size":1112,"mtime":1612189860899,"results":"14","hashOfConfig":"9"},{"size":789,"mtime":1612120531814,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sfzffo",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/index.js",[],"/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/Components/Software.js",[],"/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/Components/App.js",[],"/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/Components/Account.js",["31"],"import './MainStyle.css';\nimport { React, useState, useRef } from 'react';\nimport Nav from 'react-bootstrap/Nav'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\nimport {\n    Switch,\n    Route,\n    Link,\n    useParams,\n    useRouteMatch, \n    useHistory\n  } from \"react-router-dom\";\n  import { AuthProvider, useAuth } from '../contexts/AuthContext'\n \n\nexport default function Account(){\n    let { path, url } = useRouteMatch(); \n        return(\n            <AuthProvider>\n                <div className=\"body\">\n                    <Nav variant=\"pills\" defaultActiveKey=\"/Sign Up\">\n                        <Nav.Item>\n                            <Nav.Link href=\"/Login\"><Link style={{color: 'black', fontSize: \".75em\"}} to={`${url}/Login`}>Already A Member</Link></Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link href=\"/Sign Up\"><Link style={{color: 'black', fontSize: \".75em\"}} to={`${url}/Sign Up`}>Sign Up!</Link></Nav.Link>\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Nav.Link href=\"/Forgot Password\"><Link style={{color: 'black', fontSize: \".75em\"}} to={`${url}/Forgot Password`}>Forgot Password</Link></Nav.Link>\n                        </Nav.Item>\n                    </Nav>\n\n\n                    <Switch>\n                        <Route path={`${path}/:topicId`}>\n                            <Topic />\n                        </Route>\n                    </Switch>\n                </div>\n            </AuthProvider>\n        );\n}\n\n\nfunction Topic() {\n    // The <Route> that rendered this component has a\n    // path of `/topics/:topicId`. The `:topicId` portion\n    // of the URL indicates a placeholder that we can\n    // get from `useParams()`.\n    let { topicId } = useParams();\n\n    let Display = (topicId===\"Login\") ? <Login /> : <SignUp />\n    if(topicId=== \"Forgot Password\"){\n        Display = <ForgotPass />\n    }\n\n    return (\n      <div style={{marginLeft:\"15%\"}}>\n          <div style={{width:\"80%\", marginTop: \"5%\"}}>\n            {Display}\n          </div>\n      </div>\n    );\n  }\n\n\nfunction Login() {\n    const emailRef = useRef(); \n    const passRef = useRef();\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false)\n    const { login } = useAuth(); \n    const history = useHistory();\n\n    async function handleLogin(e){\n        e.preventDefault(); \n        try{\n            setError(\"\")\n            setLoading(true)\n            await login(emailRef.current.value, passRef.current.value)\n            history.push(\"/\")\n        } catch { \n            setError(\"Failed to log in\")\n        }\n        setLoading(false);\n    }\n\n    return(\n        <div>\n            {error && <Alert variant=\"danger\">{error}</Alert>}\n            <Form onSubmit={handleLogin}>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control style={{width: \"20em\", margin:\"auto\"}} type=\"email\" placeholder=\"Enter email\" ref={emailRef} />\n                    <Form.Text className=\"text-muted\">\n                        We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n            \n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control style={{width: \"20em\", margin:\"auto\"}} type=\"password\" placeholder=\"Password\" ref={passRef}/>\n                </Form.Group>\n\n\n\n                <Button disabled={loading} variant=\"primary\" type=\"submit\">\n                    Login\n                </Button>\n            </Form>\n    </div>\n    ); \n}\n\nfunction SignUp() {\n    const fnameRef = useRef(); \n    const lnameRef = useRef(); \n    const emailRef = useRef();\n    const passwordRef = useRef(); \n    const passwordconfRef = useRef();\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false)\n    const { signup, currentUser } = useAuth(); \n    const history = useHistory();\n\n    async function handleSignup(e) {\n        e.preventDefault()\n\n        if (passwordRef.current.value !== passwordconfRef.current.value){\n            return setError('Passwords do not match')\n        }\n        if (passwordRef.current.value.length < 6){\n            return setError('Password must be 6 or more characters long')\n        }\n\n        try{\n            setError(''); \n            setLoading(true);\n            await signup(emailRef.current.value, passwordRef.current.value)\n            history.push(\"/\")\n        } catch {\n            setError('Failed to create an Account')\n        }\n\n        setLoading(false)\n    }\n    return(\n        <div>\n            {error && <Alert variant=\"danger\">{error}</Alert>}\n            <Form onSubmit={handleSignup}>\n                <Form.Group controlId=\"formName\" >\n                    <Form.Label>First Name</Form.Label>\n                    <Form.Control style={{width: \"20em\", margin:\"auto\"}} type=\"text\" placeholder=\"Fname\" ref={fnameRef} />\n                    <Form.Label>Last Name</Form.Label>\n                    <Form.Control style={{width: \"20em\", margin:\"auto\"}} type=\"text\" placeholder=\"Lname\" ref={lnameRef}/>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control style={{width: \"20em\", margin:\"auto\"}} type=\"email\" placeholder=\"Enter email\" ref={emailRef} />\n                    <Form.Text className=\"text-muted\">\n                        We'll never share your email with anyone else.\n                    </Form.Text>\n                </Form.Group>\n            \n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control style={{width: \"20em\", margin:\"auto\"}} type=\"password\" placeholder=\"Password\" ref={passwordRef} />\n                    <Form.Text className=\"text-muted\">\n                        Password must be 6 or more characters long\n                    </Form.Text>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPasswordConfirm\">\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Control style={{width: \"20em\", margin:\"auto\"}} type=\"password\" placeholder=\"Password\" ref={passwordconfRef} />\n                </Form.Group>\n\n                <Button disabled={loading} variant=\"primary\" type=\"submit\">\n                    Sign Up\n                </Button>\n            </Form>\n    </div>\n    ); \n}\n\nfunction ForgotPass(){\n    const emailRef = useRef();\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false)\n    const { forgot } = useAuth(); \n    const [message, setMessage] = useState('');\n\n    async function handleForgot(e){\n        e.preventDefault(); \n        try{\n            setError(\"\")\n            setLoading(true)\n            setMessage(\"\")\n            await forgot(emailRef.current.value)\n            setMessage(\"Check your email inbox\")\n        } catch { \n            setError(\"Email Not found\")\n        }\n        setLoading(false);\n    }\n\n    return(\n        <div>\n            {error && <Alert variant=\"danger\">{error}</Alert>}\n            {message && <Alert variant=\"success\">{message}</Alert>}\n            <Form style={{marginTop: \"2em\"}} onSubmit={handleForgot}>\n                <Form.Group controlId=\"forgotPass\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control style={{width: \"20em\", margin:\"auto\"}} type=\"email\" placeholder=\"Enter email\" ref={emailRef} />\n                </Form.Group>\n                <Button disabled={loading} variant=\"primary\" type=\"submit\">\n                    Send Reset Email\n                </Button>\n            </Form> \n        </div>\n        \n    )\n}","/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/reportWebVitals.js",[],"/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/contexts/AuthContext.js",[],"/Users/nbstr/Documents/2021 Spring/SENG350V Software Studio/chain-tracker-react/src/Components/firebase.js",[],{"ruleId":"32","severity":1,"message":"33","line":125,"column":21,"nodeType":"34","messageId":"35","endLine":125,"endColumn":32},"no-unused-vars","'currentUser' is assigned a value but never used.","Identifier","unusedVar"]